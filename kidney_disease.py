# -*- coding: utf-8 -*-
"""kidney_disease

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1czIq_J3F5tD9t5wMeTFWW9CLvjHq87GL
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report,confusion_matrix
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/kidney_disease (1) (2).csv')
data

data = data.replace('?', np.nan)
print(data)

categorical_cols = ['rbc', 'pc', 'pcc', 'ba', 'htn', 'dm', 'cad', 'appet', 'pe', 'ane']
data[categorical_cols] = data[categorical_cols].apply(lambda x: x.astype('category').cat.codes)
data

numerical_cols = ['age', 'bp', 'sg', 'al', 'su', 'bgr', 'bu', 'sc', 'sod', 'pot', 'hemo', 'pcv', 'wc', 'rc']
data[numerical_cols] = data[numerical_cols].apply(pd.to_numeric, errors='coerce')
data[numerical_cols] = data[numerical_cols].fillna(data[numerical_cols].mean())
data

d=data.drop(['sod','pot','id','bgr', 'bu', 'sc','hemo', 'pcv', 'wc', 'rc','cad', 'pe' ],axis=1)
d

corr=data.corr()
sns.heatmap(corr)

data.head()

data.classification = data.classification.replace(to_replace='ckd\t',value='ckd')

X=d.iloc[:,:-1]
print(X.keys())
y=d.iloc[:,-1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(y_test.unique)

nb_classifier = GaussianNB()
nb_classifier.fit(X_train, y_train)

y_pred = nb_classifier.predict(X_test)
print(len(y_pred))

accuracy = accuracy_score(y_test, y_pred)

print(f"Accuracy: {accuracy}")

report = classification_report(y_test, y_pred)

print('Classification Report:\n', report)

precision = precision_score(y_test, y_pred,pos_label='ckd',average=None)
recall = recall_score(y_test, y_pred,pos_label='ckd',average=None)
f1 = f1_score(y_test, y_pred,pos_label='ckd',average=None)

print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-Score: {f1}")

confusion_mat=confusion_matrix(y_test,y_pred)
confusion_mat

plt.figure(figsize=(8,6))
sns.heatmap(confusion_mat,annot=True,fmt='d',cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('confusion matrix')
plt.show()

age = float(input("Enter age: "))
blood_pressure = float(input("Enter blood pressure: "))
specific_gravity = float(input("Enter specific gravity: "))
albumin = float(input("Enter albumin: "))
sugar = float(input("Enter sugar: "))
red_blood_cells = float(input("Enter red blood cells count: "))
pus_cells = float(input("Enter pus cells count: "))
pus_cell_clumps = input("Pus Cell Clumps (present/absent): ").lower()
bacteria = input("Bacteria (present/absent): ").lower()
hypertension = input("Hypertension (yes/no): ").lower()
diabetes = input("Diabetes (yes/no): ").lower()
appetite = input("Appetite (good/poor): ").lower()
anemia = input("Anemia (yes/no): ").lower()
user_data = np.array([[age, blood_pressure, specific_gravity, albumin, sugar, red_blood_cells, pus_cells,
                      pus_cell_clumps == "present", bacteria == "present",
                      hypertension == "yes", diabetes == "yes", appetite == "good", anemia == "yes"]])
prediction = nb_classifier.predict(user_data)
if prediction[0] == 1:
    print("You may be suffering from Chronic Kidney Disease (CKD). Please consult a healthcare professional.")
else:
    print("You are not predicted to have Chronic Kidney Disease (CKD).")